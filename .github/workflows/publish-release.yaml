# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish Release

on:
  push:
    branches: [main]
  workflow_dispatch:
  workflow_call:
    inputs:
      target:
        required: true
        type: string

env:
  DEBIAN_FRONTEND: 'noninteractive'
  TZ: Etc/UTC

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
      options: --privileged --user root
    steps:
      - name: Prepare environment
        run: |
            apt update
            apt install -y flatpak flatpak-builder appstream npm nodejs tar xz-utils git git-lfs

      - name: Checkout branch
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ inputs.target }}

      - name: Build NPX
        run: |
            npm install
            npm run linux
            tar -cJvf GoogleMessages.tar.xz dist/Linux/GoogleMessages-linux-x64

      - name: Upload binary build
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: raw
          path: GoogleMessages.tar.xz

      - name: Set up Git to allow file transport
        run: |
          git config --global --add protocol.file.allow always

      - name: Build Flatpak file
        run: |
            flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
            flatpak-builder --install-deps-from=flathub --install --force-clean build-dir io.github.GamePlayer_8.Google_Messages_For_Desktop.yaml
            flatpak build-bundle /var/lib/flatpak/repo google-messages.flatpak io.github.GamePlayer_8.Google_Messages_For_Desktop

      - name: Upload Flatpak
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: flatpak
          path: google-messages.flatpak

  check-if-release-needed:
    runs-on: ubuntu-latest
    outputs:
      latest-commit-sha: ${{ steps.get-latest-commit.outputs.result }}
      has-new-commits: ${{ steps.check-for-new-commits.outputs.has-new-commits }}
    steps:
      - name: Extract branch name
        id: extract-branch-name
        run: |
          echo "result=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> "$GITHUB_OUTPUT"
      - name: Sanity checks
        if: ${{ github.event_name == 'workflow_dispatch' && steps.extract-branch-name.outputs.result != 'develop' }}
        run: |
          echo "::error::this workflow can only be run on the \"develop\" branch"
          exit 1

      - name: Get latest nightly-tagged commit
        id: get-latest-tag
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          result-encoding: string
          script: |
            try {
              const ref = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "tags/nightly",
              });
              return ref.data.object.sha;
            } catch (err) {
              if (err.name === "HttpError" && err.status === 404) {
                return "tag-doesnt-exist";
              }
              throw err;
            }

      - name: Get latest commit on dev branch
        id: get-latest-commit
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          result-encoding: string
          script: |
            const ref = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "heads/main",
            });
            return ref.data.object.sha;

      - name: Check for new commits
        id: check-for-new-commits
        if: ${{ steps.get-latest-tag.outputs.result != 'tag-doesnt-exist' }}
        env:
          LATEST_TAGGED_SHA: "${{ steps.get-latest-tag.outputs.result }}"
          LATEST_SHA: "${{ steps.get-latest-commit.outputs.result }}"
        run: |
          if [[ -z "$LATEST_TAGGED_SHA" ]]; then
            echo "::error::LATEST_TAGGED_SHA env var is invalid"
            exit 1
          fi
          if [[ -z "$LATEST_SHA" ]]; then
            echo "::error::LATEST_TAGGED_SHA env var is invalid"
            exit 1
          fi

          if [[ "$LATEST_TAGGED_SHA" == "$LATEST_SHA" ]]; then
            echo "has-new-commits=false" >> "$GITHUB_OUTPUT"
          else
            echo "has-new-commits=true" >> "$GITHUB_OUTPUT"
          fi

  publish-release:
    runs-on: ubuntu-latest
    needs: [check-if-release-needed]
    if: ${{ needs.check-if-release-needed.outputs.has-new-commits == 'true' }}
    outputs:
      target: ${{ needs.check-if-release-needed.outputs.latest-commit-sha }}
    steps:
      - name: Set target and tag
        id: set-variables
        run: |
          echo "target=${{ needs.check-if-release-needed.outputs.latest-commit-sha }}" >> "$GITHUB_OUTPUT"
          echo "tag=nightly" >> "$GITHUB_OUTPUT"
          echo "prerelease=true" >> "$GITHUB_OUTPUT"

  publish:
    runs-on: ubuntu-latest
    needs: [build, publish-release]

    steps:
      - name: Download Flatpak
        uses: actions/download-artifact@v4
        with:
          name: flatpak
          path: .

      - name: Download binary build
        uses: actions/download-artifact@v4
        with:
          name: raw
          path: .
          
      - name: Publish release
        uses: notpeelz/action-gh-create-release@c1bebd17c8a128e8db4165a68be4dc4e3f106ff1 # v5.0.1
        with:
          target: ${{ needs.publish-release.outputs.target }}
          tag: nightly
          prerelease: true
          strategy: replace
          title: "Automatic build"
          body: "Automatic build"
          files: |
            google-messages.flatpak
            GoogleMessages.tar.xz
